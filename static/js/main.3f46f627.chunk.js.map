{"version":3,"sources":["components/HomeComponent.js","App.js","serviceWorker.js","index.js"],"names":["HomeComponent","props","state","label","breakLen","isPlay","sessionLen","sessionTimeLeft","breakTimeLeft","timer","timerId","handleReset","bind","counterBtn","updateTimer","play","tick","buzzer","clearInterval","this","setState","default","audioBeep","pause","currentTime","e","id","target","tagName","parentNode","split","updateCounter","parseInt","number","counter","status","minMax","leftTime","minutes","Math","floor","seconds","slice","distTime","Date","getTime","setInterval","distance","className","onClick","preload","src","ref","audio","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAiLeA,E,YA7Kb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,UACPC,SAAU,EACVC,QAAQ,EACRC,WAAY,GACZC,gBAAiB,KACjBC,cAAe,IACfC,MAAO,QACPC,QAAS,MAGX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,KAAO,EAAKA,KAAKH,KAAV,gBACZ,EAAKI,KAAO,EAAKA,KAAKJ,KAAV,gBACZ,EAAKK,OAAS,EAAKA,OAAOL,KAAZ,gBAlBE,E,2EAsBhBM,cAAcC,KAAKjB,MAAMQ,SACzBS,KAAKC,SAASD,KAAKlB,MAAMoB,SACzBF,KAAKG,UAAUC,QACfJ,KAAKG,UAAUE,YAAc,I,iCAGpBC,GACT,IAAMC,GAA2B,WAArBD,EAAEE,OAAOC,QAAsBH,EAAEE,OAAOD,GAAKD,EAAEE,OAAOE,WAAWH,IAAII,MAAM,KAE1E,YAAVJ,EAAG,IAAqBP,KAAKjB,MAAMG,OAOpB,UAAVqB,EAAG,IAAmBP,KAAKjB,MAAMG,QACvCc,KAAKC,SAAS,CACZhB,SAAUe,KAAKY,cAAcZ,KAAKjB,MAAME,SAAUsB,EAAG,IACrDlB,cAAe,IAAAwB,SAASb,KAAKY,cAAcZ,KAAKjB,MAAMI,WAAYoB,EAAG,OATvEP,KAAKC,SAAS,CACZd,WAAYa,KAAKY,cAAcZ,KAAKjB,MAAMI,WAAYoB,EAAG,IACzDnB,gBAAiB,IAAAyB,SAASb,KAAKY,cAAcZ,KAAKjB,MAAMI,WAAYoB,EAAG,S,6BAYtEO,GACL,QAAGA,EAAS,IAAMA,GAAU,K,oCAKhBC,EAASC,GACrB,MAAc,cAAXA,EACMhB,KAAKiB,OAAOF,EAAQ,KAAMA,EAAUA,EAEtCf,KAAKiB,OAAOF,EAAQ,KAAMA,EAAUA,I,oCAI3C,IAAIG,EAAW,EAES,YAArBlB,KAAKjB,MAAMC,MACZkC,EAAWlB,KAAKjB,MAAMK,gBACK,UAArBY,KAAKjB,MAAMC,QACjBkC,EAAWlB,KAAKjB,MAAMM,eAExB,IAAI8B,EAAUC,KAAKC,MAAMH,EAAS,KAClCA,GAAmB,IAAPC,EACZ,IAAIG,EAAUF,KAAKC,MAAMH,EAAW,KAEpC,OAAQ,IAAMC,GAASI,OAAO,GAAK,KAAO,IAAMD,GAASC,OAAO,K,6BAI7DvB,KAAKjB,MAAMG,QACZa,cAAcC,KAAKjB,MAAMQ,SACzBS,KAAKC,SAAS,CAAEf,QAAQ,EAAOK,QAAS,QAGxCS,KAAKC,SAAS,CAAEf,QAAQ,EAAMK,QAASS,KAAKH,W,6BAKzC,IAAD,OAEA2B,GAAW,IAAIC,MAAOC,UAsC1B,MApCwB,YAArB1B,KAAKjB,MAAMC,MAAqBwC,GAAYxB,KAAKjB,MAAMK,gBACrDoC,GAAYxB,KAAKjB,MAAMM,cAEdsC,YAAY,WACxB,IAAIC,EAAWJ,GAAY,IAAIC,MAAQC,UAEnCP,EAAUC,KAAKC,MAAOO,EAAQ,KAAT,KACrBN,EAAUF,KAAKC,MAAOO,EAAQ,IAAkB,KAE5B,YAArB,EAAK7C,MAAMC,MACZ,EAAKiB,SAAS,CACZb,gBAAiB,EAAKL,MAAMK,gBAAmB,IAC/CE,MAAO,WAAI6B,GAAUI,OAAO,GAAK,IAAMD,IAGzC,EAAKrB,SAAS,CACZZ,cAAe,EAAKN,MAAMM,cAAiB,IAC3CC,MAAO,WAAI6B,GAAUI,OAAO,GAAK,IAAMD,IAIT,IAA/B,EAAKvC,MAAMK,iBAAsD,IAA7B,EAAKL,MAAMM,eAChD,EAAKS,UAEJ,EAAKf,MAAMK,gBAAkB,GAAK,EAAKL,MAAMM,cAAgB,KAC9DU,cAAc,EAAKhB,MAAMQ,SACzB,EAAKU,SAAS,CACZjB,MAA4B,YAArB,EAAKD,MAAMC,MAAqB,QAAU,UACjDI,gBAAiB,MAAKL,MAAMI,WAC5BE,cAAe,MAAKN,MAAME,SAC1BM,QAAS,EAAKM,WAIlB,O,+BAMCG,KAAKjB,MAAMG,QACZc,KAAKG,UAAUP,S,+BAGV,IAAD,OACN,OACE,6BACE,wBAAIiC,UAAU,SAAd,kBACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,OACb,2BAAOtB,GAAG,eAAV,gBACA,yBAAKsB,UAAU,WACb,yBAAKA,UAAU,WACb,4BAAQC,QAAS9B,KAAKN,WAAYa,GAAG,mBAAkB,uBAAGsB,UAAU,sBACpE,4BAAQC,QAAS9B,KAAKN,WAAYa,GAAG,mBAAkB,uBAAGsB,UAAU,yBAEtE,0BAAMtB,GAAG,gBAAiBP,KAAKjB,MAAME,YAGzC,yBAAK4C,UAAU,OACb,2BAAOtB,GAAG,iBAAV,kBACA,yBAAKsB,UAAU,WACb,yBAAKA,UAAU,WACb,4BAAQC,QAAS9B,KAAKN,WAAYa,GAAG,qBAAoB,uBAAGsB,UAAU,sBACtE,4BAAQC,QAAS9B,KAAKN,WAAYa,GAAG,qBAAoB,uBAAGsB,UAAU,yBAExE,0BAAMtB,GAAG,kBAAmBP,KAAKjB,MAAMI,eAI7C,yBAAK0C,UAAU,SACb,wBAAItB,GAAG,eAAgBP,KAAKjB,MAAMC,OAClC,0BAAMuB,GAAG,aAAcP,KAAKL,eAC5B,4BAAQmC,QAAS9B,KAAKJ,KAAMW,GAAG,cAA/B,cACA,4BAAQuB,QAAS9B,KAAKR,YAAae,GAAG,SAAQ,uBAAGsB,UAAU,mBAC3D,2BAAOtB,GAAG,OAAOwB,QAAQ,OAAOC,IAAI,wBAAwBC,IAAK,SAACC,GAAY,EAAK/B,UAAY+B,Y,GAvK/EC,IAAMC,WC2BnBC,E,YAxBb,WAAYvD,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,UACPC,SAAU,EACVE,WAAY,GACZC,gBAAiB,KACjBC,cAAe,IACfC,MAAO,QACPJ,QAAQ,EACRK,QAAS,MAVK,E,sEAgBhB,OACE,6BACE,kBAAC,EAAD,CAAeW,QAASF,KAAKjB,a,GApBnBoD,IAAMC,WCSJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.3f46f627.chunk.js","sourcesContent":["import React from 'react';\n\nclass HomeComponent extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      label: 'session',\n      breakLen: 5,\n      isPlay: false,\n      sessionLen: 25,\n      sessionTimeLeft: 25*(1000*60),\n      breakTimeLeft: 5*(1000*60),\n      timer: '25:00',\n      timerId: null,\n    }\n\n    this.handleReset = this.handleReset.bind(this);\n    this.counterBtn = this.counterBtn.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n    this.play = this.play.bind(this);\n    this.tick = this.tick.bind(this);\n    this.buzzer = this.buzzer.bind(this);\n  }\n\n  handleReset(){\n    clearInterval(this.state.timerId);\n    this.setState(this.props.default);\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n  }\n\n  counterBtn(e){\n    const id = (e.target.tagName === 'BUTTON'? e.target.id : e.target.parentNode.id).split('-');\n\n    if(id[0] === 'session' && !this.state.isPlay){\n      this.setState({\n        sessionLen: this.updateCounter(this.state.sessionLen, id[1]),\n        sessionTimeLeft: parseInt(this.updateCounter(this.state.sessionLen, id[1])) * (1000*60)\n      });\n    }\n    \n    else if(id[0] === 'break' && !this.state.isPlay){ \n      this.setState({ \n        breakLen: this.updateCounter(this.state.breakLen, id[1]),\n        breakTimeLeft: parseInt(this.updateCounter(this.state.sessionLen, id[1])) * (1000*60)\n      });\n    }\n  }\n\n  minMax(number){\n    if(number > 60 || number <= 0)\n      return false;\n    return true\n  }\n\n  updateCounter(counter, status){\n    if(status === 'increment')\n      return this.minMax(counter+1)? ++counter : counter;   \n      \n    return this.minMax(counter-1)? --counter : counter;   \n  }\n\n  updateTimer(){\n    let leftTime = 0;\n\n    if(this.state.label === 'session')\n      leftTime = this.state.sessionTimeLeft;\n    else if(this.state.label === 'break')  \n      leftTime = this.state.breakTimeLeft;\n\n    let minutes = Math.floor(leftTime/(1000*60));\n    leftTime -= minutes * (1000*60);\n    let seconds = Math.floor(leftTime / 1000);\n\n    return ('0' + minutes).slice(-2) + ':' + ('0' + seconds).slice(-2);\n  }\n\n  play(){\n    if(this.state.isPlay){\n      clearInterval(this.state.timerId);\n      this.setState({ isPlay: false, timerId: null })\n\n    }else {\n      this.setState({ isPlay: true, timerId: this.tick() })\n\n    }\n  }\n\n  tick(){\n\n    let distTime = new Date().getTime(); \n    \n    if(this.state.label === 'session') distTime += this.state.sessionTimeLeft \n    else distTime += this.state.breakTimeLeft\n\n    const timer = setInterval(() => {\n      let distance = distTime - (new Date()).getTime();\n      \n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      var seconds = Math.floor((distance % (1000 * 60)) / 1000);\n      \n      if(this.state.label === 'session'){\n        this.setState({\n          sessionTimeLeft: this.state.sessionTimeLeft - (1000),\n          timer: `0${minutes}`.slice(-2) + ':' + seconds \n        })\n      } else {\n        this.setState({\n          breakTimeLeft: this.state.breakTimeLeft - (1000),\n          timer: `0${minutes}`.slice(-2) + ':' + seconds \n        })\n      }\n\n      if(this.state.sessionTimeLeft === 0 || this.state.breakTimeLeft === 0)\n        this.buzzer();\n\n      if(this.state.sessionTimeLeft < 0 || this.state.breakTimeLeft < 0){\n        clearInterval(this.state.timerId)\n        this.setState({ \n          label: this.state.label === 'session'? 'break' : 'session',\n          sessionTimeLeft: this.state.sessionLen * (1000 * 60),\n          breakTimeLeft: this.state.breakLen * (1000 * 60),\n          timerId: this.tick() \n        })\n      }\n\n    },1000)\n\n    return timer;\n  }\n\n  buzzer() {\n    if(this.state.isPlay)\n      this.audioBeep.play();\n  }\n  \n  render(){\n    return (\n      <div>\n        <h2 className=\"title\">Pomodoro Clock</h2>\n        <div className=\"card mt-3\">\n          <div className=\"flex\">\n            <div className=\"col\">\n              <label id=\"break-label\">Break length</label>\n              <div className=\"counter\">\n                <div className=\"control\">\n                  <button onClick={this.counterBtn} id=\"break-increment\"><i className=\"fa fa-chevron-up\"></i></button>\n                  <button onClick={this.counterBtn} id=\"break-decrement\"><i className=\"fa fa-chevron-down\"></i></button>\n                </div>\n                <span id=\"break-length\">{ this.state.breakLen }</span>\n              </div>\n            </div> \n            <div className=\"col\">\n              <label id=\"session-label\">Session length</label>\n              <div className=\"counter\">  \n                <div className=\"control\">\n                  <button onClick={this.counterBtn} id=\"session-increment\"><i className=\"fa fa-chevron-up\"></i></button>\n                  <button onClick={this.counterBtn} id=\"session-decrement\"><i className=\"fa fa-chevron-down\"></i></button>\n                </div>\n                <span id=\"session-length\">{ this.state.sessionLen }</span>\n              </div>\n            </div> \n          </div>\n          <div className=\"timer\">\n            <h3 id=\"timer-label\">{ this.state.label }</h3>\n            <span id=\"time-left\">{ this.updateTimer() }</span>\n            <button onClick={this.play} id=\"start_stop\">Start/Stop</button>\n            <button onClick={this.handleReset} id=\"reset\"><i className=\"fa fa-refresh\"></i></button>\n            <audio id=\"beep\" preload=\"auto\" src=\"https://goo.gl/65cBl1\" ref={(audio) => { this.audioBeep = audio }} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomeComponent;\n","import React from 'react';\nimport HomeComponent from './components/HomeComponent';\n\nclass App extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      label: 'session',\n      breakLen: 5,\n      sessionLen: 25,\n      sessionTimeLeft: 25*(1000*60),\n      breakTimeLeft: 5*(1000*60),\n      timer: '25:00',\n      isPlay: false,\n      timerId: null,\n    }\n    \n  }\n\n  render(){\n    return (\n      <div>\n        <HomeComponent default={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}